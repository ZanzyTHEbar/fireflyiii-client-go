package commands

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// configCmd represents the config command
var configCmd = &cobra.Command{
	Use:   "config",
	Short: "Manage configuration settings",
	Long: `Manage configuration settings for the Firefly III client.
	
Examples:
  firefly-client config init
  firefly-client config show
  firefly-client config set firefly_url http://localhost:8080
  firefly-client config set token your-api-token`,
}

var configInitCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize a new configuration file",
	Long:  `Create a new configuration file with default values`,
	Run: func(cmd *cobra.Command, args []string) {
		// Get home directory
		home, err := os.UserHomeDir()
		if err != nil {
			fmt.Printf("Error getting home directory: %v\n", err)
			os.Exit(1)
		}

		// Create config directory
		configDir := filepath.Join(home, ".firefly-client")
		err = os.MkdirAll(configDir, 0755)
		if err != nil {
			fmt.Printf("Error creating config directory: %v\n", err)
			os.Exit(1)
		}

		// Config file path
		configFile := filepath.Join(configDir, "config.yaml")

		// Check if config file already exists
		if _, err := os.Stat(configFile); err == nil {
			fmt.Printf("Configuration file already exists at: %s\n", configFile)
			fmt.Println("Use 'firefly-client config show' to view current settings")
			return
		}

		// Create default config content
		defaultConfig := `# Firefly Client Configuration
# Generated by firefly-client config init

# Firefly III instance URL (required)
firefly_url: "http://localhost:8080"

# Firefly III API token (required)
# Get this from: Profile & preferences -> OAuth -> Personal Access Tokens
token: ""

# Output format for commands (json, yaml, table)
output_format: "table"

# Enable debug logging
debug: false

# Request timeout in seconds
timeout: 30

# API version to use
api_version: "v1"
`

		// Write config file
		err = os.WriteFile(configFile, []byte(defaultConfig), 0644)
		if err != nil {
			fmt.Printf("Error creating config file: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("Configuration file created at: %s\n", configFile)
		fmt.Println("\nNext steps:")
		fmt.Println("1. Edit the config file to set your Firefly III URL and API token")
		fmt.Println("2. Use 'firefly-client config show' to verify your settings")
		fmt.Println("3. Test the connection with 'firefly-client accounts list'")
	},
}

var configShowCmd = &cobra.Command{
	Use:   "show",
	Short: "Show current configuration",
	Long:  `Display the current configuration settings`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("Current configuration:")
		fmt.Printf("  Config file: %s\n", viper.ConfigFileUsed())
		fmt.Printf("  Firefly URL: %s\n", viper.GetString("firefly_url"))

		token := viper.GetString("token")
		if token != "" {
			if len(token) > 8 {
				fmt.Printf("  Token: %s... (hidden)\n", token[:8])
			} else {
				fmt.Printf("  Token: %s... (hidden)\n", token)
			}
		} else {
			fmt.Printf("  Token: (not set)\n")
		}

		fmt.Printf("  Output format: %s\n", viper.GetString("output_format"))
		fmt.Printf("  Debug: %v\n", viper.GetBool("debug"))
		fmt.Printf("  Timeout: %d seconds\n", viper.GetInt("timeout"))
		fmt.Printf("  API version: %s\n", viper.GetString("api_version"))
	},
}

var configSetCmd = &cobra.Command{
	Use:   "set [key] [value]",
	Short: "Set a configuration value",
	Long:  `Set a configuration value. Changes are saved to the config file.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		key := args[0]
		value := args[1]

		// TODO: Implement config setting
		// This would require writing back to the config file
		fmt.Printf("TODO: Set %s = %s\n", key, value)
		fmt.Println("For now, please edit the config file manually.")
		fmt.Printf("Config file location: %s\n", viper.ConfigFileUsed())
	},
}

func init() {
	rootCmd.AddCommand(configCmd)
	configCmd.AddCommand(configInitCmd)
	configCmd.AddCommand(configShowCmd)
	configCmd.AddCommand(configSetCmd)
}
